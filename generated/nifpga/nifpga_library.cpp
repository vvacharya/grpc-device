//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-FPGA Metadata
//---------------------------------------------------------------------
#include "nifpga_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "NiFpga.dll";
#else
static const char* kLibraryName = "libNiFpga.so.13";
#endif

namespace nifpga_grpc {

NiFpgaLibrary::NiFpgaLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.Initialize = reinterpret_cast<InitializePtr>(shared_library_.get_function_pointer("NiFpgaDll_Initialize"));
  function_pointers_.Finalize = reinterpret_cast<FinalizePtr>(shared_library_.get_function_pointer("NiFpgaDll_Finalize"));
  function_pointers_.Open = reinterpret_cast<OpenPtr>(shared_library_.get_function_pointer("NiFpgaDll_Open"));
  function_pointers_.Close = reinterpret_cast<ClosePtr>(shared_library_.get_function_pointer("NiFpgaDll_Close"));
  function_pointers_.Run = reinterpret_cast<RunPtr>(shared_library_.get_function_pointer("NiFpgaDll_Run"));
  function_pointers_.Reset = reinterpret_cast<ResetPtr>(shared_library_.get_function_pointer("NiFpgaDll_Reset"));
  function_pointers_.Download = reinterpret_cast<DownloadPtr>(shared_library_.get_function_pointer("NiFpgaDll_Download"));
  function_pointers_.ReadBool = reinterpret_cast<ReadBoolPtr>(shared_library_.get_function_pointer("NiFpgaDll_ReadBool"));
  function_pointers_.ReadI8 = reinterpret_cast<ReadI8Ptr>(shared_library_.get_function_pointer("NiFpgaDll_ReadI8"));
  function_pointers_.ReadU8 = reinterpret_cast<ReadU8Ptr>(shared_library_.get_function_pointer("NiFpgaDll_ReadU8"));
  function_pointers_.ReadI16 = reinterpret_cast<ReadI16Ptr>(shared_library_.get_function_pointer("NiFpgaDll_ReadI16"));
  function_pointers_.ReadU16 = reinterpret_cast<ReadU16Ptr>(shared_library_.get_function_pointer("NiFpgaDll_ReadU16"));
  function_pointers_.ReadI32 = reinterpret_cast<ReadI32Ptr>(shared_library_.get_function_pointer("NiFpgaDll_ReadI32"));
  function_pointers_.ReadU32 = reinterpret_cast<ReadU32Ptr>(shared_library_.get_function_pointer("NiFpgaDll_ReadU32"));
  function_pointers_.ReadI64 = reinterpret_cast<ReadI64Ptr>(shared_library_.get_function_pointer("NiFpgaDll_ReadI64"));
  function_pointers_.ReadU64 = reinterpret_cast<ReadU64Ptr>(shared_library_.get_function_pointer("NiFpgaDll_ReadU64"));
  function_pointers_.WriteBool = reinterpret_cast<WriteBoolPtr>(shared_library_.get_function_pointer("NiFpgaDll_WriteBool"));
  function_pointers_.WriteI8 = reinterpret_cast<WriteI8Ptr>(shared_library_.get_function_pointer("NiFpgaDll_WriteI8"));
  function_pointers_.WriteU8 = reinterpret_cast<WriteU8Ptr>(shared_library_.get_function_pointer("NiFpgaDll_WriteU8"));
  function_pointers_.WriteI16 = reinterpret_cast<WriteI16Ptr>(shared_library_.get_function_pointer("NiFpgaDll_WriteI16"));
  function_pointers_.WriteU16 = reinterpret_cast<WriteU16Ptr>(shared_library_.get_function_pointer("NiFpgaDll_WriteU16"));
  function_pointers_.WriteI32 = reinterpret_cast<WriteI32Ptr>(shared_library_.get_function_pointer("NiFpgaDll_WriteI32"));
  function_pointers_.WriteU32 = reinterpret_cast<WriteU32Ptr>(shared_library_.get_function_pointer("NiFpgaDll_WriteU32"));
  function_pointers_.WriteI64 = reinterpret_cast<WriteI64Ptr>(shared_library_.get_function_pointer("NiFpgaDll_WriteI64"));
  function_pointers_.WriteU64 = reinterpret_cast<WriteU64Ptr>(shared_library_.get_function_pointer("NiFpgaDll_WriteU64"));
  function_pointers_.ReadArrayI16 = reinterpret_cast<ReadArrayI16Ptr>(shared_library_.get_function_pointer("NiFpgaDll_ReadArrayI16"));
  function_pointers_.ReadArrayU16 = reinterpret_cast<ReadArrayU16Ptr>(shared_library_.get_function_pointer("NiFpgaDll_ReadArrayU16"));
  function_pointers_.ReadArrayI64 = reinterpret_cast<ReadArrayI64Ptr>(shared_library_.get_function_pointer("NiFpgaDll_ReadArrayI64"));
  function_pointers_.ReadArrayU64 = reinterpret_cast<ReadArrayU64Ptr>(shared_library_.get_function_pointer("NiFpgaDll_ReadArrayU64"));
  function_pointers_.WriteArrayI16 = reinterpret_cast<WriteArrayI16Ptr>(shared_library_.get_function_pointer("NiFpgaDll_WriteArrayI16"));
  function_pointers_.WriteArrayU16 = reinterpret_cast<WriteArrayU16Ptr>(shared_library_.get_function_pointer("NiFpgaDll_WriteArrayU16"));
  function_pointers_.WriteArrayI64 = reinterpret_cast<WriteArrayI64Ptr>(shared_library_.get_function_pointer("NiFpgaDll_WriteArrayI64"));
  function_pointers_.WriteArrayU64 = reinterpret_cast<WriteArrayU64Ptr>(shared_library_.get_function_pointer("NiFpgaDll_WriteArrayU64"));
}

NiFpgaLibrary::~NiFpgaLibrary()
{
}

::grpc::Status NiFpgaLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

NiFpga_Status NiFpgaLibrary::Initialize()
{
  if (!function_pointers_.Initialize) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_Initialize.");
  }
  return function_pointers_.Initialize();
}

NiFpga_Status NiFpgaLibrary::Finalize()
{
  if (!function_pointers_.Finalize) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_Finalize.");
  }
  return function_pointers_.Finalize();
}

NiFpga_Status NiFpgaLibrary::Open(const char* bitfile, const char* signature, const char* resource, uint32_t attribute, NiFpga_Session* session)
{
  if (!function_pointers_.Open) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_Open.");
  }
  return function_pointers_.Open(bitfile, signature, resource, attribute, session);
}

NiFpga_Status NiFpgaLibrary::Close(NiFpga_Session session, uint32_t attribute)
{
  if (!function_pointers_.Close) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_Close.");
  }
  return function_pointers_.Close(session, attribute);
}

NiFpga_Status NiFpgaLibrary::Run(NiFpga_Session session, uint32_t attribute)
{
  if (!function_pointers_.Run) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_Run.");
  }
  return function_pointers_.Run(session, attribute);
}

NiFpga_Status NiFpgaLibrary::Reset(NiFpga_Session session)
{
  if (!function_pointers_.Reset) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_Reset.");
  }
  return function_pointers_.Reset(session);
}

NiFpga_Status NiFpgaLibrary::Download(NiFpga_Session session)
{
  if (!function_pointers_.Download) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_Download.");
  }
  return function_pointers_.Download(session);
}

NiFpga_Status NiFpgaLibrary::ReadBool(NiFpga_Session session, uint32_t indicator, NiFpga_Bool* value)
{
  if (!function_pointers_.ReadBool) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_ReadBool.");
  }
  return function_pointers_.ReadBool(session, indicator, value);
}

NiFpga_Status NiFpgaLibrary::ReadI8(NiFpga_Session session, uint32_t indicator, int8_t* value)
{
  if (!function_pointers_.ReadI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_ReadI8.");
  }
  return function_pointers_.ReadI8(session, indicator, value);
}

NiFpga_Status NiFpgaLibrary::ReadU8(NiFpga_Session session, uint32_t indicator, uint8_t* value)
{
  if (!function_pointers_.ReadU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_ReadU8.");
  }
  return function_pointers_.ReadU8(session, indicator, value);
}

NiFpga_Status NiFpgaLibrary::ReadI16(NiFpga_Session session, uint32_t indicator, int16_t* value)
{
  if (!function_pointers_.ReadI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_ReadI16.");
  }
  return function_pointers_.ReadI16(session, indicator, value);
}

NiFpga_Status NiFpgaLibrary::ReadU16(NiFpga_Session session, uint32_t indicator, uint16_t* value)
{
  if (!function_pointers_.ReadU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_ReadU16.");
  }
  return function_pointers_.ReadU16(session, indicator, value);
}

NiFpga_Status NiFpgaLibrary::ReadI32(NiFpga_Session session, uint32_t indicator, int32_t* value)
{
  if (!function_pointers_.ReadI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_ReadI32.");
  }
  return function_pointers_.ReadI32(session, indicator, value);
}

NiFpga_Status NiFpgaLibrary::ReadU32(NiFpga_Session session, uint32_t indicator, uint32_t* value)
{
  if (!function_pointers_.ReadU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_ReadU32.");
  }
  return function_pointers_.ReadU32(session, indicator, value);
}

NiFpga_Status NiFpgaLibrary::ReadI64(NiFpga_Session session, uint32_t indicator, int64_t* value)
{
  if (!function_pointers_.ReadI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_ReadI64.");
  }
  return function_pointers_.ReadI64(session, indicator, value);
}

NiFpga_Status NiFpgaLibrary::ReadU64(NiFpga_Session session, uint32_t indicator, uint64_t* value)
{
  if (!function_pointers_.ReadU64) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_ReadU64.");
  }
  return function_pointers_.ReadU64(session, indicator, value);
}

NiFpga_Status NiFpgaLibrary::WriteBool(NiFpga_Session session, uint32_t control, NiFpga_Bool value)
{
  if (!function_pointers_.WriteBool) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_WriteBool.");
  }
  return function_pointers_.WriteBool(session, control, value);
}

NiFpga_Status NiFpgaLibrary::WriteI8(NiFpga_Session session, uint32_t control, int8_t value)
{
  if (!function_pointers_.WriteI8) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_WriteI8.");
  }
  return function_pointers_.WriteI8(session, control, value);
}

NiFpga_Status NiFpgaLibrary::WriteU8(NiFpga_Session session, uint32_t control, uint8_t value)
{
  if (!function_pointers_.WriteU8) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_WriteU8.");
  }
  return function_pointers_.WriteU8(session, control, value);
}

NiFpga_Status NiFpgaLibrary::WriteI16(NiFpga_Session session, uint32_t control, int16_t value)
{
  if (!function_pointers_.WriteI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_WriteI16.");
  }
  return function_pointers_.WriteI16(session, control, value);
}

NiFpga_Status NiFpgaLibrary::WriteU16(NiFpga_Session session, uint32_t control, uint16_t value)
{
  if (!function_pointers_.WriteU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_WriteU16.");
  }
  return function_pointers_.WriteU16(session, control, value);
}

NiFpga_Status NiFpgaLibrary::WriteI32(NiFpga_Session session, uint32_t control, int32_t value)
{
  if (!function_pointers_.WriteI32) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_WriteI32.");
  }
  return function_pointers_.WriteI32(session, control, value);
}

NiFpga_Status NiFpgaLibrary::WriteU32(NiFpga_Session session, uint32_t control, uint32_t value)
{
  if (!function_pointers_.WriteU32) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_WriteU32.");
  }
  return function_pointers_.WriteU32(session, control, value);
}

NiFpga_Status NiFpgaLibrary::WriteI64(NiFpga_Session session, uint32_t control, int64_t value)
{
  if (!function_pointers_.WriteI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_WriteI64.");
  }
  return function_pointers_.WriteI64(session, control, value);
}

NiFpga_Status NiFpgaLibrary::WriteU64(NiFpga_Session session, uint32_t control, uint64_t value)
{
  if (!function_pointers_.WriteU64) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_WriteU64.");
  }
  return function_pointers_.WriteU64(session, control, value);
}

NiFpga_Status NiFpgaLibrary::ReadArrayI16(NiFpga_Session session, uint32_t indicator, int16_t array[], size_t size)
{
  if (!function_pointers_.ReadArrayI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_ReadArrayI16.");
  }
  return function_pointers_.ReadArrayI16(session, indicator, array, size);
}

NiFpga_Status NiFpgaLibrary::ReadArrayU16(NiFpga_Session session, uint32_t indicator, uint16_t array[], size_t size)
{
  if (!function_pointers_.ReadArrayU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_ReadArrayU16.");
  }
  return function_pointers_.ReadArrayU16(session, indicator, array, size);
}

NiFpga_Status NiFpgaLibrary::ReadArrayI64(NiFpga_Session session, uint32_t indicator, int64_t array[], size_t size)
{
  if (!function_pointers_.ReadArrayI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_ReadArrayI64.");
  }
  return function_pointers_.ReadArrayI64(session, indicator, array, size);
}

NiFpga_Status NiFpgaLibrary::ReadArrayU64(NiFpga_Session session, uint32_t indicator, uint64_t array[], size_t size)
{
  if (!function_pointers_.ReadArrayU64) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_ReadArrayU64.");
  }
  return function_pointers_.ReadArrayU64(session, indicator, array, size);
}

NiFpga_Status NiFpgaLibrary::WriteArrayI16(NiFpga_Session session, uint32_t indicator, const int16_t array[], size_t size)
{
  if (!function_pointers_.WriteArrayI16) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_WriteArrayI16.");
  }
  return function_pointers_.WriteArrayI16(session, indicator, array, size);
}

NiFpga_Status NiFpgaLibrary::WriteArrayU16(NiFpga_Session session, uint32_t indicator, const uint16_t array[], size_t size)
{
  if (!function_pointers_.WriteArrayU16) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_WriteArrayU16.");
  }
  return function_pointers_.WriteArrayU16(session, indicator, array, size);
}

NiFpga_Status NiFpgaLibrary::WriteArrayI64(NiFpga_Session session, uint32_t indicator, const int64_t array[], size_t size)
{
  if (!function_pointers_.WriteArrayI64) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_WriteArrayI64.");
  }
  return function_pointers_.WriteArrayI64(session, indicator, array, size);
}

NiFpga_Status NiFpgaLibrary::WriteArrayU64(NiFpga_Session session, uint32_t indicator, const uint64_t array[], size_t size)
{
  if (!function_pointers_.WriteArrayU64) {
    throw nidevice_grpc::LibraryLoadException("Could not find NiFpga_WriteArrayU64.");
  }
  return function_pointers_.WriteArrayU64(session, indicator, array, size);
}

}  // namespace nifpga_grpc
