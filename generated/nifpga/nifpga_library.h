//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Real implementation of LibraryInterface for NI-FPGA
//---------------------------------------------------------------------
#ifndef NIFPGA_GRPC_LIBRARY_H
#define NIFPGA_GRPC_LIBRARY_H

#include "nifpga_library_interface.h"

#include <server/shared_library.h>

namespace nifpga_grpc {

class NiFpgaLibrary : public nifpga_grpc::NiFpgaLibraryInterface {
 public:
  NiFpgaLibrary();
  virtual ~NiFpgaLibrary();

  ::grpc::Status check_function_exists(std::string functionName);
  NiFpga_Status Initialize();
  NiFpga_Status Finalize();
  NiFpga_Status Open(const char* bitfile, const char* signature, const char* resource, uint32_t attribute, NiFpga_Session* session);
  NiFpga_Status Close(NiFpga_Session session, uint32_t attribute);
  NiFpga_Status Run(NiFpga_Session session, uint32_t attribute);
  NiFpga_Status Reset(NiFpga_Session session);
  NiFpga_Status Download(NiFpga_Session session);
  NiFpga_Status ReadBool(NiFpga_Session session, uint32_t indicator, NiFpga_Bool* value);
  NiFpga_Status ReadI8(NiFpga_Session session, uint32_t indicator, int8_t* value);
  NiFpga_Status ReadU8(NiFpga_Session session, uint32_t indicator, uint8_t* value);
  NiFpga_Status ReadI16(NiFpga_Session session, uint32_t indicator, int16_t* value);
  NiFpga_Status ReadU16(NiFpga_Session session, uint32_t indicator, uint16_t* value);
  NiFpga_Status ReadI32(NiFpga_Session session, uint32_t indicator, int32_t* value);
  NiFpga_Status ReadU32(NiFpga_Session session, uint32_t indicator, uint32_t* value);
  NiFpga_Status ReadI64(NiFpga_Session session, uint32_t indicator, int64_t* value);
  NiFpga_Status ReadU64(NiFpga_Session session, uint32_t indicator, uint64_t* value);
  NiFpga_Status WriteBool(NiFpga_Session session, uint32_t control, NiFpga_Bool value);
  NiFpga_Status WriteI8(NiFpga_Session session, uint32_t control, int8_t value);
  NiFpga_Status WriteU8(NiFpga_Session session, uint32_t control, uint8_t value);
  NiFpga_Status WriteI16(NiFpga_Session session, uint32_t control, int16_t value);
  NiFpga_Status WriteU16(NiFpga_Session session, uint32_t control, uint16_t value);
  NiFpga_Status WriteI32(NiFpga_Session session, uint32_t control, int32_t value);
  NiFpga_Status WriteU32(NiFpga_Session session, uint32_t control, uint32_t value);
  NiFpga_Status WriteI64(NiFpga_Session session, uint32_t control, int64_t value);
  NiFpga_Status WriteU64(NiFpga_Session session, uint32_t control, uint64_t value);
  NiFpga_Status ReadArrayI16(NiFpga_Session session, uint32_t indicator, int16_t array[], size_t size);
  NiFpga_Status ReadArrayU16(NiFpga_Session session, uint32_t indicator, uint16_t array[], size_t size);
  NiFpga_Status ReadArrayI64(NiFpga_Session session, uint32_t indicator, int64_t array[], size_t size);
  NiFpga_Status ReadArrayU64(NiFpga_Session session, uint32_t indicator, uint64_t array[], size_t size);

 private:
  using InitializePtr = decltype(&NiFpga_Initialize);
  using FinalizePtr = decltype(&NiFpga_Finalize);
  using OpenPtr = decltype(&NiFpga_Open);
  using ClosePtr = decltype(&NiFpga_Close);
  using RunPtr = decltype(&NiFpga_Run);
  using ResetPtr = decltype(&NiFpga_Reset);
  using DownloadPtr = decltype(&NiFpga_Download);
  using ReadBoolPtr = decltype(&NiFpga_ReadBool);
  using ReadI8Ptr = decltype(&NiFpga_ReadI8);
  using ReadU8Ptr = decltype(&NiFpga_ReadU8);
  using ReadI16Ptr = decltype(&NiFpga_ReadI16);
  using ReadU16Ptr = decltype(&NiFpga_ReadU16);
  using ReadI32Ptr = decltype(&NiFpga_ReadI32);
  using ReadU32Ptr = decltype(&NiFpga_ReadU32);
  using ReadI64Ptr = decltype(&NiFpga_ReadI64);
  using ReadU64Ptr = decltype(&NiFpga_ReadU64);
  using WriteBoolPtr = decltype(&NiFpga_WriteBool);
  using WriteI8Ptr = decltype(&NiFpga_WriteI8);
  using WriteU8Ptr = decltype(&NiFpga_WriteU8);
  using WriteI16Ptr = decltype(&NiFpga_WriteI16);
  using WriteU16Ptr = decltype(&NiFpga_WriteU16);
  using WriteI32Ptr = decltype(&NiFpga_WriteI32);
  using WriteU32Ptr = decltype(&NiFpga_WriteU32);
  using WriteI64Ptr = decltype(&NiFpga_WriteI64);
  using WriteU64Ptr = decltype(&NiFpga_WriteU64);
  using ReadArrayI16Ptr = decltype(&NiFpga_ReadArrayI16);
  using ReadArrayU16Ptr = decltype(&NiFpga_ReadArrayU16);
  using ReadArrayI64Ptr = decltype(&NiFpga_ReadArrayI64);
  using ReadArrayU64Ptr = decltype(&NiFpga_ReadArrayU64);

  typedef struct FunctionPointers {
    InitializePtr Initialize;
    FinalizePtr Finalize;
    OpenPtr Open;
    ClosePtr Close;
    RunPtr Run;
    ResetPtr Reset;
    DownloadPtr Download;
    ReadBoolPtr ReadBool;
    ReadI8Ptr ReadI8;
    ReadU8Ptr ReadU8;
    ReadI16Ptr ReadI16;
    ReadU16Ptr ReadU16;
    ReadI32Ptr ReadI32;
    ReadU32Ptr ReadU32;
    ReadI64Ptr ReadI64;
    ReadU64Ptr ReadU64;
    WriteBoolPtr WriteBool;
    WriteI8Ptr WriteI8;
    WriteU8Ptr WriteU8;
    WriteI16Ptr WriteI16;
    WriteU16Ptr WriteU16;
    WriteI32Ptr WriteI32;
    WriteU32Ptr WriteU32;
    WriteI64Ptr WriteI64;
    WriteU64Ptr WriteU64;
    ReadArrayI16Ptr ReadArrayI16;
    ReadArrayU16Ptr ReadArrayU16;
    ReadArrayI64Ptr ReadArrayI64;
    ReadArrayU64Ptr ReadArrayU64;
  } FunctionLoadStatus;

  nidevice_grpc::SharedLibrary shared_library_;
  FunctionPointers function_pointers_;
};

}  // namespace nifpga_grpc

#endif  // NIFPGA_GRPC_LIBRARY_H
