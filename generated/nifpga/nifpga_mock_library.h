//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Mock of LibraryInterface for NI-FPGA
//---------------------------------------------------------------------
#ifndef NIFPGA_GRPC_MOCK_LIBRARY_H
#define NIFPGA_GRPC_MOCK_LIBRARY_H

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "nifpga_library_interface.h"

namespace ni {
namespace tests {
namespace unit {

class NiFpgaMockLibrary : public nifpga_grpc::NiFpgaLibraryInterface {
 public:
  MOCK_METHOD(NiFpga_Status, Initialize, (), (override));
  MOCK_METHOD(NiFpga_Status, Finalize, (), (override));
  MOCK_METHOD(NiFpga_Status, Open, (const char* bitfile, const char* signature, const char* resource, uint32_t attribute, NiFpga_Session* session), (override));
  MOCK_METHOD(NiFpga_Status, Close, (NiFpga_Session session, uint32_t attribute), (override));
  MOCK_METHOD(NiFpga_Status, Run, (NiFpga_Session session, uint32_t attribute), (override));
  MOCK_METHOD(NiFpga_Status, Reset, (NiFpga_Session session), (override));
  MOCK_METHOD(NiFpga_Status, Download, (NiFpga_Session session), (override));
  MOCK_METHOD(NiFpga_Status, ReadBool, (NiFpga_Session session, uint32_t indicator, NiFpga_Bool* value), (override));
  MOCK_METHOD(NiFpga_Status, ReadI8, (NiFpga_Session session, uint32_t indicator, int8_t* value), (override));
  MOCK_METHOD(NiFpga_Status, ReadU8, (NiFpga_Session session, uint32_t indicator, uint8_t* value), (override));
  MOCK_METHOD(NiFpga_Status, ReadI16, (NiFpga_Session session, uint32_t indicator, int16_t* value), (override));
  MOCK_METHOD(NiFpga_Status, ReadU16, (NiFpga_Session session, uint32_t indicator, uint16_t* value), (override));
  MOCK_METHOD(NiFpga_Status, ReadI32, (NiFpga_Session session, uint32_t indicator, int32_t* value), (override));
  MOCK_METHOD(NiFpga_Status, ReadU32, (NiFpga_Session session, uint32_t indicator, uint32_t* value), (override));
  MOCK_METHOD(NiFpga_Status, ReadI64, (NiFpga_Session session, uint32_t indicator, int64_t* value), (override));
  MOCK_METHOD(NiFpga_Status, ReadU64, (NiFpga_Session session, uint32_t indicator, uint64_t* value), (override));
  MOCK_METHOD(NiFpga_Status, WriteBool, (NiFpga_Session session, uint32_t control, NiFpga_Bool value), (override));
  MOCK_METHOD(NiFpga_Status, WriteI8, (NiFpga_Session session, uint32_t control, int8_t value), (override));
  MOCK_METHOD(NiFpga_Status, WriteU8, (NiFpga_Session session, uint32_t control, uint8_t value), (override));
  MOCK_METHOD(NiFpga_Status, WriteI16, (NiFpga_Session session, uint32_t control, int16_t value), (override));
  MOCK_METHOD(NiFpga_Status, WriteU16, (NiFpga_Session session, uint32_t control, uint16_t value), (override));
  MOCK_METHOD(NiFpga_Status, WriteI32, (NiFpga_Session session, uint32_t control, int32_t value), (override));
  MOCK_METHOD(NiFpga_Status, WriteU32, (NiFpga_Session session, uint32_t control, uint32_t value), (override));
  MOCK_METHOD(NiFpga_Status, WriteI64, (NiFpga_Session session, uint32_t control, int64_t value), (override));
  MOCK_METHOD(NiFpga_Status, WriteU64, (NiFpga_Session session, uint32_t control, uint64_t value), (override));
};

}  // namespace unit
}  // namespace tests
}  // namespace ni
#endif  // NIFPGA_GRPC_MOCK_LIBRARY_H
