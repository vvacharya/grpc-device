
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-FPGA.
//---------------------------------------------------------------------
#include "nifpga_client.h"

#include <grpcpp/grpcpp.h>

#include <nifpga.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace nifpga_grpc::experimental::client {

OpenResponse
open(const StubPtr& stub, const pb::string& bitfile, const pb::string& signature, const pb::string& resource, const pb::uint32& attribute)
{
  ::grpc::ClientContext context;

  auto request = OpenRequest{};
  request.set_bitfile(bitfile);
  request.set_signature(signature);
  request.set_resource(resource);
  request.set_attribute(attribute);

  auto response = OpenResponse{};

  raise_if_error(
      stub->Open(&context, request, &response));

  return response;
}

CloseResponse
close(const StubPtr& stub, const nidevice_grpc::Session& session, const pb::uint32& attribute)
{
  ::grpc::ClientContext context;

  auto request = CloseRequest{};
  request.mutable_session()->CopyFrom(session);
  request.set_attribute(attribute);

  auto response = CloseResponse{};

  raise_if_error(
      stub->Close(&context, request, &response));

  return response;
}


} // namespace nifpga_grpc::experimental::client
